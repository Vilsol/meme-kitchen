// Code generated by ent, DO NOT EDIT.

package template

import (
	"memekitchen/ent/predicate"
	"memekitchen/ent/schema"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// AvgDistance applies equality check predicate on the "avg_distance" field. It's identical to AvgDistanceEQ.
func AvgDistance(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldAvgDistance, v))
}

// DiffDistance applies equality check predicate on the "diff_distance" field. It's identical to DiffDistanceEQ.
func DiffDistance(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDiffDistance, v))
}

// PerceptionDistance applies equality check predicate on the "perception_distance" field. It's identical to PerceptionDistanceEQ.
func PerceptionDistance(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPerceptionDistance, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldName, v))
}

// AvgDistanceEQ applies the EQ predicate on the "avg_distance" field.
func AvgDistanceEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldAvgDistance, v))
}

// AvgDistanceNEQ applies the NEQ predicate on the "avg_distance" field.
func AvgDistanceNEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldAvgDistance, v))
}

// AvgDistanceIn applies the In predicate on the "avg_distance" field.
func AvgDistanceIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldAvgDistance, vs...))
}

// AvgDistanceNotIn applies the NotIn predicate on the "avg_distance" field.
func AvgDistanceNotIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldAvgDistance, vs...))
}

// AvgDistanceGT applies the GT predicate on the "avg_distance" field.
func AvgDistanceGT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldAvgDistance, v))
}

// AvgDistanceGTE applies the GTE predicate on the "avg_distance" field.
func AvgDistanceGTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldAvgDistance, v))
}

// AvgDistanceLT applies the LT predicate on the "avg_distance" field.
func AvgDistanceLT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldAvgDistance, v))
}

// AvgDistanceLTE applies the LTE predicate on the "avg_distance" field.
func AvgDistanceLTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldAvgDistance, v))
}

// DiffDistanceEQ applies the EQ predicate on the "diff_distance" field.
func DiffDistanceEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDiffDistance, v))
}

// DiffDistanceNEQ applies the NEQ predicate on the "diff_distance" field.
func DiffDistanceNEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldDiffDistance, v))
}

// DiffDistanceIn applies the In predicate on the "diff_distance" field.
func DiffDistanceIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldDiffDistance, vs...))
}

// DiffDistanceNotIn applies the NotIn predicate on the "diff_distance" field.
func DiffDistanceNotIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldDiffDistance, vs...))
}

// DiffDistanceGT applies the GT predicate on the "diff_distance" field.
func DiffDistanceGT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldDiffDistance, v))
}

// DiffDistanceGTE applies the GTE predicate on the "diff_distance" field.
func DiffDistanceGTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldDiffDistance, v))
}

// DiffDistanceLT applies the LT predicate on the "diff_distance" field.
func DiffDistanceLT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldDiffDistance, v))
}

// DiffDistanceLTE applies the LTE predicate on the "diff_distance" field.
func DiffDistanceLTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldDiffDistance, v))
}

// PerceptionDistanceEQ applies the EQ predicate on the "perception_distance" field.
func PerceptionDistanceEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPerceptionDistance, v))
}

// PerceptionDistanceNEQ applies the NEQ predicate on the "perception_distance" field.
func PerceptionDistanceNEQ(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldPerceptionDistance, v))
}

// PerceptionDistanceIn applies the In predicate on the "perception_distance" field.
func PerceptionDistanceIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldPerceptionDistance, vs...))
}

// PerceptionDistanceNotIn applies the NotIn predicate on the "perception_distance" field.
func PerceptionDistanceNotIn(vs ...*schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldPerceptionDistance, vs...))
}

// PerceptionDistanceGT applies the GT predicate on the "perception_distance" field.
func PerceptionDistanceGT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldPerceptionDistance, v))
}

// PerceptionDistanceGTE applies the GTE predicate on the "perception_distance" field.
func PerceptionDistanceGTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldPerceptionDistance, v))
}

// PerceptionDistanceLT applies the LT predicate on the "perception_distance" field.
func PerceptionDistanceLT(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldPerceptionDistance, v))
}

// PerceptionDistanceLTE applies the LTE predicate on the "perception_distance" field.
func PerceptionDistanceLTE(v *schema.BigInt) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldPerceptionDistance, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		p(s.Not())
	})
}
