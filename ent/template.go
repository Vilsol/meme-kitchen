// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"memekitchen/data"
	"memekitchen/ent/schema"
	"memekitchen/ent/template"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Template is the model entity for the Template schema.
type Template struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Data holds the value of the "data" field.
	Data []data.TemplateText `json:"data,omitempty"`
	// AvgDistance holds the value of the "avg_distance" field.
	AvgDistance *schema.BigInt `json:"avg_distance,omitempty"`
	// DiffDistance holds the value of the "diff_distance" field.
	DiffDistance *schema.BigInt `json:"diff_distance,omitempty"`
	// PerceptionDistance holds the value of the "perception_distance" field.
	PerceptionDistance *schema.BigInt `json:"perception_distance,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Template) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case template.FieldData:
			values[i] = new([]byte)
		case template.FieldAvgDistance, template.FieldDiffDistance, template.FieldPerceptionDistance:
			values[i] = new(schema.BigInt)
		case template.FieldID:
			values[i] = new(sql.NullInt64)
		case template.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Template fields.
func (t *Template) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case template.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case template.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case template.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case template.FieldAvgDistance:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field avg_distance", values[i])
			} else if value != nil {
				t.AvgDistance = value
			}
		case template.FieldDiffDistance:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field diff_distance", values[i])
			} else if value != nil {
				t.DiffDistance = value
			}
		case template.FieldPerceptionDistance:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field perception_distance", values[i])
			} else if value != nil {
				t.PerceptionDistance = value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Template.
// This includes values selected through modifiers, order, etc.
func (t *Template) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Template.
// Note that you need to call Template.Unwrap() before calling this method if this Template
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Template) Update() *TemplateUpdateOne {
	return NewTemplateClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Template entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Template) Unwrap() *Template {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Template is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Template) String() string {
	var builder strings.Builder
	builder.WriteString("Template(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", t.Data))
	builder.WriteString(", ")
	builder.WriteString("avg_distance=")
	builder.WriteString(fmt.Sprintf("%v", t.AvgDistance))
	builder.WriteString(", ")
	builder.WriteString("diff_distance=")
	builder.WriteString(fmt.Sprintf("%v", t.DiffDistance))
	builder.WriteString(", ")
	builder.WriteString("perception_distance=")
	builder.WriteString(fmt.Sprintf("%v", t.PerceptionDistance))
	builder.WriteByte(')')
	return builder.String()
}

// Templates is a parsable slice of Template.
type Templates []*Template
